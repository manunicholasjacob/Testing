import subprocess

def read_header(bus):
    try:
        bridge_control_output = subprocess.check_output(["setpci", "-s", bus, "0e.w"])
        return(f" : {bridge_control_output.decode().strip()}")
    except subprocess.CalledProcessError:
        return(f"Error reading Bridge Control for {bus}.")

def read_slot_capabilities(bus):
    try:
        slot_capabilities_output = subprocess.check_output(["setpci", "-s", bus, "a4.l"])
        return slot_capabilities_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def execute_shell_command(command):
    try:
        # Execute the shell command
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            # Successful execution
            return result.stdout.decode("utf-8").strip()  # Decode bytes to string
        else:
            # Error occurredhttps://github.com/manunicholasjacob/Testing/blob/main/getbdf2
            return f"Error: {result.stderr.decode('utf-8').strip()}"  # Decode bytes to string
    except Exception as e:
        return f"Error: {str(e)}"

# Execute the given shell command
command_output = execute_shell_command("lspci | cut -d ' ' -f 1")

# Print the output
#print(command_output)

split_numbers = command_output.split('\n')
split_numbers = [num for num in split_numbers if num]

# Print the resulting list
#print(split_numbers)

for i in range(len(split_numbers)):
    header = read_header(split_numbers[i])
    if header[-1] =='1':
        print(split_numbers[i],header)
        print(read_slot_capabilities(split_numbers[i]))
        hex_number = int(read_slot_capabilities(split_numbers[i]), 16)

        binary_string = bin(hex_number)[2:]  # Remove the '0b' prefix
    
        # Extract bits from indent 31 to 19
        extracted_bits = binary_string[13:32]  # 31:19 (counting from left to right)
    
        # Convert the extracted binary substring back to an integer
        extracted_integer = int(extracted_bits, 2)


        print(f"Slot number: {extracted_integer}")
    else:
        pass
