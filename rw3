import subprocess
import getpass
import time

def read_bridge_control(bus):
    try:
        bridge_control_output = subprocess.check_output(["setpci", "-s", bus, "3e.w"])
        return bridge_control_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_link_status(bus):
    try:
        link_status_output = subprocess.check_output(["setpci", "-s", bus, "8a.w"])
        return link_status_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_slot_capabilities(bus):
    try:
        slot_capabilities_output = subprocess.check_output(["setpci", "-s", bus, "a8.l"])
        return slot_capabilities_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_link_capabilities(bus):
    try:
        link_capabilities_output = subprocess.check_output(["setpci", "-s", bus, "84.l"])
        return link_capabilities_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_secondary_bus_number(bus):
    try:
        secondary_bus_output = subprocess.check_output(["setpci", "-s", bus, "19.b"])
        return secondary_bus_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def set_bridge_control(bus, value, password):
    try:
        subprocess.run(["sudo", "-S", "setpci", "-s", bus, "3e.w=" + value], input=password.encode(), check=True)
        print(f"Set Bridge Control for {bus} to {value}")
    except subprocess.CalledProcessError:
        print(f"Error setting Bridge Control for {bus}.")

def format_bdf(bus):
    # Extract bus number
    bus_number = bus.split(":")[0]
    return f"{bus_number}:0.0"

if __name__ == "__main__":
    specific_bus_bridge = "17:00.0"  # Bridge control bus address
    specific_bus_link = "18:00.0"   # Link status bus address
    desired_values = ["0003", "0043"]  # Alternating values
    num_loops = 25  # Number of loops

    # Get the password once
    user_password = getpass.getpass("Enter your password (sudo access): ")

    # Open a text file for writing
    with open("output.txt", "w") as output_file:
        for i in range(num_loops):
            # Alternate between desired values
            desired_value = desired_values[i % len(desired_values)]

            # Read current values
            current_bridge_control = read_bridge_control(specific_bus_bridge)
            current_link_status = read_link_status(specific_bus_link)
            current_slot_capabilities = read_slot_capabilities(specific_bus_bridge)
            current_link_capabilities = read_link_capabilities(specific_bus_link)
            secondary_bus_number = read_secondary_bus_number(specific_bus_bridge)

            # Write to the text file
            output_file.write(f"Loop {i + 1} - Current Bridge Control for {specific_bus_bridge}: {current_bridge_control}\n")
            output_file.write(f"Loop {i + 1} - Link Status for {specific_bus_link}: {current_link_status}\n")
            output_file.write(f"Loop {i + 1} - Slot Capabilities for {specific_bus_bridge}: {current_slot_capabilities}\n")
            output_file.write(f"Loop {i + 1} - Link Capabilities for {specific_bus_link}: {current_link_capabilities}\n")
            output_file.write(f"Loop {i + 1} - Secondary Bus Number for {specific_bus_bridge}: {format_bdf(secondary_bus_number)}\n")

            # Set new value
            set_bridge_control(specific_bus_bridge, desired_value, user_password)

            # Wait for a moment (optional)
            time.sleep(0.3)

    print("Loop completed. Output written to output.txt.")
