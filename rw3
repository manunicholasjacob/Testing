import subprocess
import getpass
import time

def read_bridge_control(bus):
    try:
        bridge_control_output = subprocess.check_output(["setpci", "-s", bus, "3e.w"])
        return bridge_control_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_link_status(bus, register):
    try:
        link_status_output = subprocess.check_output(["setpci", "-s", bus, f"{register}.w"])
        return link_status_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_slot_capabilities(bus):
    try:
        slot_capabilities_output = subprocess.check_output(["setpci", "-s", bus, "a8.l"])
        return slot_capabilities_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def read_secondary_bus_number(bus):
    try:
        secondary_bus_output = subprocess.check_output(["setpci", "-s", bus, "19.b"])
        return secondary_bus_output.decode().strip()
    except subprocess.CalledProcessError:
        return None

if __name__ == "__main__":
    specific_bus_bridge = "17:00.0"  # Bridge control bus address
    specific_bus_link_17 = "17:00.0"  # Link status bus address for 17:00.0
    specific_bus_link_18 = "18:00.0"  # Link status bus address for 18:00.0
    desired_values = ["0003", "0043"]  # Alternating values
    num_loops = 25  # Number of loops

    # Get the password once
    user_password = getpass.getpass("Enter your password (sudo access): ")

    # Open a text file for writing
    with open("output.txt", "w") as output_file:
        for i in range(num_loops):
            # Alternate between desired values
            desired_value = desired_values[i % len(desired_values)]

            # Read current values
            current_bridge_control = read_bridge_control(specific_bus_bridge)
            current_link_status_17 = read_link_status(specific_bus_link_17, "a2")
            current_link_status_18 = read_link_status(specific_bus_link_18, "8a")
            current_slot_capabilities = read_slot_capabilities(specific_bus_bridge)
            secondary_bus_number = read_secondary_bus_number(specific_bus_bridge)

            # Write to the text file
            output_file.write(f"Loop {i + 1} - Current Bridge Control for {specific_bus_bridge}: {current_bridge_control}\n")
            output_file.write(f"Loop {i + 1} - Link Status for {specific_bus_link_17}: {current_link_status_17}\n")
            output_file.write(f"Loop {i + 1} - Link Status for {specific_bus_link_18}: {current_link_status_18}\n")
            output_file.write(f"Loop {i + 1} - Slot Capabilities for {specific_bus_bridge}: {current_slot_capabilities}\n")
            output_file.write(f"Loop {i + 1} - Secondary Bus Number for {specific_bus_bridge}: {format_bdf(secondary_bus_number)}\n")

            # Set new value
            set_bridge_control(specific_bus_bridge, desired_value, user_password)

            # Wait for a moment (optional)
            time.sleep(0.3)

    print("Loop completed. Output written to output.txt.")
